rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    function isAuthed() {
      return request.auth != null;
    }

    function getGame(gameId) {
      return firestore.get(/databases/(default)/documents/games/$(gameId));
    }

    function otherPlayer(key) {
      return key == 'A' ? 'B' : 'A';
    }

    function isRecordingPhase(game) {
      return game.data.phase in ['SET_RECORD', 'RESP_RECORD'];
    }

    function shooterUid(game) {
      let by = game.data.current.by;
      let setter = game.data.players[by];
      let responder = game.data.players[otherPlayer(by)];
      return game.data.phase == 'RESP_RECORD' ? responder.uid : setter.uid;
    }

    function hasActiveShooter(game, uploaderUid) {
      return game != null
        && game.data != null
        && game.data.players != null
        && game.data.current != null
        && game.data.current.by != null
        && game.data.players[game.data.current.by] != null
        && game.data.players[otherPlayer(game.data.current.by)] != null
        && isRecordingPhase(game)
        && shooterUid(game) == uploaderUid;
    }

    function isShooterForGame(gameId, uploaderUid) {
      let game = getGame(gameId);
      return hasActiveShooter(game, uploaderUid);
    }

    function isAllowedUpload() {
      return request.resource.size <= 120 * 1024 * 1024
        && request.resource.contentType != null
        && request.resource.contentType.matches('^video/(mp4|quicktime|webm)$');
    }

    match /challenges/{gameId}/{uploaderUid}/{fileName} {
      allow read: if true;

      allow create: if isAuthed()
        && request.auth.uid == uploaderUid
        && resource == null
        && isAllowedUpload()
        && isShooterForGame(gameId, uploaderUid);

      allow update, delete: if false;
    }

    match /clips/{fileName} {
      allow read: if true;
      allow create: if isAuthed()
        && resource == null;
      allow update, delete: if false;
    }
  }
}
